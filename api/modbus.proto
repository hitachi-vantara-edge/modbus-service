syntax = "proto3";

package api;

service Modbus {

  rpc ReadReg (ReadRegRequest) returns (ReadRegReply) {}

  rpc ReadCoil (ReadCoilRequest) returns (ReadCoilReply) {}

  rpc OpenTCPConnection (OpenTCPConnectionRequest) returns (ConnectionStatusReply) {}

  rpc OpenSerialConnection (OpenSerialConnectionRequest) returns (ConnectionStatusReply) {}

  rpc CloseConnection (CloseConnectionRequest) returns (ConnectionStatusReply) {}

  rpc GetConnectionStatus (GetConnectionStatusRequest) returns (ConnectionStatusReply) {}

}

message ReadRegRequest {
  string connectionId = 1;
  int32 slave_addr = 2;
  int32 start_addr = 3;
  int32 num_of_reg = 4;
  bool  read_input = 5;
}

message ReadRegReply {
  int32 byte_count = 1;
  bool   is_input = 2;

  message RegisterValue {
    int32 addr = 1;
    string value = 2;
  }
  
  repeated RegisterValue values = 3;
}

message ReadCoilRequest {
  string connectionId = 1;
  int32 slave_addr = 2;
  int32 start_addr = 3;
  int32 num_of_coil = 4;
  bool   read_input = 5;
}

message ReadCoilReply {
  int32 bit_count = 1;
  bool   is_input = 2;

  message CoilValue {
    int32 addr = 1;
    string value = 2;
  }

  repeated CoilValue values = 3;
}

message OpenTCPConnectionRequest {
  string addr = 1;
  int32  port = 2;
}

message OpenSerialConnectionRequest {
  string device = 1;
  int32  baud = 2;
  string parity = 3;
  int32  data_bit = 4;
  int32  stop_bit = 5;
}

message CloseConnectionRequest {
  string id = 1;
}

message GetConnectionStatusRequest {
  string id = 1;
}

message ConnectionStatusReply {
  string id = 1;
  map<string,string> props = 2;
  enum Type {
    TCP = 0;
    SERIAL = 1;
  }
  Type type = 3;
  enum Status {
    ERROR = 0;
    CLOSED = 1;
    PENDING = 2;
    UNKNOWN = 3;
    READY = 4;
  }
  Status status = 4;
  string errmsg = 5;
}