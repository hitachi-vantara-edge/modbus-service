// GNU LESSER GENERAL PUBLIC LICENSE Version 2.1, February 1999

// WARNING: This file has automatically been generated on Wed, 19 Sep 2018 15:16:06 PDT.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package libmodbus

/*
#cgo LDFLAGS: -lmodbus
#include "config.h"
#include "modbus.h"
#include "modbus-private.h"
#include "modbus-rtu.h"
#include "modbus-rtu-private.h"
#include "modbus-tcp.h"
#include "modbus-tcp-private.h"
#include "modbus-version.h"
#include "errno.h"
#include "stdio.h"
#include "stdlib.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// SetSlave function as declared in libmodbus/modbus.h:179
func SetSlave(ctx []T, slave int32) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	cslave, _ := (C.int)(slave), cgoAllocsUnknown
	__ret := C.modbus_set_slave(cctx, cslave)
	__v := (int32)(__ret)
	return __v
}

// SetErrorRecovery function as declared in libmodbus/modbus.h:180
func SetErrorRecovery(ctx []T, errorRecovery ErrorRecoveryMode) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	cerrorRecovery, _ := (C.modbus_error_recovery_mode)(errorRecovery), cgoAllocsUnknown
	__ret := C.modbus_set_error_recovery(cctx, cerrorRecovery)
	__v := (int32)(__ret)
	return __v
}

// SetSocket function as declared in libmodbus/modbus.h:181
func SetSocket(ctx []T, s int32) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	cs, _ := (C.int)(s), cgoAllocsUnknown
	__ret := C.modbus_set_socket(cctx, cs)
	__v := (int32)(__ret)
	return __v
}

// GetSocket function as declared in libmodbus/modbus.h:182
func GetSocket(ctx []T) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	__ret := C.modbus_get_socket(cctx)
	__v := (int32)(__ret)
	return __v
}

// GetResponseTimeout function as declared in libmodbus/modbus.h:184
func GetResponseTimeout(ctx []T, toSec []uint32, toUsec []uint32) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	ctoSec, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&toSec)).Data)), cgoAllocsUnknown
	ctoUsec, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&toUsec)).Data)), cgoAllocsUnknown
	__ret := C.modbus_get_response_timeout(cctx, ctoSec, ctoUsec)
	__v := (int32)(__ret)
	return __v
}

// SetResponseTimeout function as declared in libmodbus/modbus.h:185
func SetResponseTimeout(ctx []T, toSec uint32, toUsec uint32) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	ctoSec, _ := (C.uint32_t)(toSec), cgoAllocsUnknown
	ctoUsec, _ := (C.uint32_t)(toUsec), cgoAllocsUnknown
	__ret := C.modbus_set_response_timeout(cctx, ctoSec, ctoUsec)
	__v := (int32)(__ret)
	return __v
}

// GetByteTimeout function as declared in libmodbus/modbus.h:187
func GetByteTimeout(ctx []T, toSec []uint32, toUsec []uint32) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	ctoSec, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&toSec)).Data)), cgoAllocsUnknown
	ctoUsec, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&toUsec)).Data)), cgoAllocsUnknown
	__ret := C.modbus_get_byte_timeout(cctx, ctoSec, ctoUsec)
	__v := (int32)(__ret)
	return __v
}

// SetByteTimeout function as declared in libmodbus/modbus.h:188
func SetByteTimeout(ctx []T, toSec uint32, toUsec uint32) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	ctoSec, _ := (C.uint32_t)(toSec), cgoAllocsUnknown
	ctoUsec, _ := (C.uint32_t)(toUsec), cgoAllocsUnknown
	__ret := C.modbus_set_byte_timeout(cctx, ctoSec, ctoUsec)
	__v := (int32)(__ret)
	return __v
}

// GetHeaderLength function as declared in libmodbus/modbus.h:190
func GetHeaderLength(ctx []T) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	__ret := C.modbus_get_header_length(cctx)
	__v := (int32)(__ret)
	return __v
}

// Connect function as declared in libmodbus/modbus.h:192
func Connect(ctx []T) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	__ret := C.modbus_connect(cctx)
	__v := (int32)(__ret)
	return __v
}

// Close function as declared in libmodbus/modbus.h:193
func Close(ctx []T) {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	C.modbus_close(cctx)
}

// Free function as declared in libmodbus/modbus.h:195
func Free(ctx []T) {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	C.modbus_free(cctx)
}

// Flush function as declared in libmodbus/modbus.h:197
func Flush(ctx []T) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	__ret := C.modbus_flush(cctx)
	__v := (int32)(__ret)
	return __v
}

// SetDebug function as declared in libmodbus/modbus.h:198
func SetDebug(ctx []T, flag int32) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	cflag, _ := (C.int)(flag), cgoAllocsUnknown
	__ret := C.modbus_set_debug(cctx, cflag)
	__v := (int32)(__ret)
	return __v
}

// Strerror function as declared in libmodbus/modbus.h:200
func Strerror(errnum int32) string {
	cerrnum, _ := (C.int)(errnum), cgoAllocsUnknown
	__ret := C.modbus_strerror(cerrnum)
	__v := packPCharString(__ret)
	return __v
}

// ReadBits function as declared in libmodbus/modbus.h:202
func ReadBits(ctx []T, addr int32, nb int32, dest []byte) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	caddr, _ := (C.int)(addr), cgoAllocsUnknown
	cnb, _ := (C.int)(nb), cgoAllocsUnknown
	cdest, _ := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dest)).Data)), cgoAllocsUnknown
	__ret := C.modbus_read_bits(cctx, caddr, cnb, cdest)
	__v := (int32)(__ret)
	return __v
}

// ReadInputBits function as declared in libmodbus/modbus.h:203
func ReadInputBits(ctx []T, addr int32, nb int32, dest []byte) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	caddr, _ := (C.int)(addr), cgoAllocsUnknown
	cnb, _ := (C.int)(nb), cgoAllocsUnknown
	cdest, _ := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dest)).Data)), cgoAllocsUnknown
	__ret := C.modbus_read_input_bits(cctx, caddr, cnb, cdest)
	__v := (int32)(__ret)
	return __v
}

// ReadRegisters function as declared in libmodbus/modbus.h:204
func ReadRegisters(ctx []T, addr int32, nb int32, dest []uint16) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	caddr, _ := (C.int)(addr), cgoAllocsUnknown
	cnb, _ := (C.int)(nb), cgoAllocsUnknown
	cdest, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dest)).Data)), cgoAllocsUnknown
	__ret := C.modbus_read_registers(cctx, caddr, cnb, cdest)
	__v := (int32)(__ret)
	return __v
}

// ReadInputRegisters function as declared in libmodbus/modbus.h:205
func ReadInputRegisters(ctx []T, addr int32, nb int32, dest []uint16) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	caddr, _ := (C.int)(addr), cgoAllocsUnknown
	cnb, _ := (C.int)(nb), cgoAllocsUnknown
	cdest, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dest)).Data)), cgoAllocsUnknown
	__ret := C.modbus_read_input_registers(cctx, caddr, cnb, cdest)
	__v := (int32)(__ret)
	return __v
}

// WriteBit function as declared in libmodbus/modbus.h:206
func WriteBit(ctx []T, coilAddr int32, status int32) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	ccoilAddr, _ := (C.int)(coilAddr), cgoAllocsUnknown
	cstatus, _ := (C.int)(status), cgoAllocsUnknown
	__ret := C.modbus_write_bit(cctx, ccoilAddr, cstatus)
	__v := (int32)(__ret)
	return __v
}

// WriteRegister function as declared in libmodbus/modbus.h:207
func WriteRegister(ctx []T, regAddr int32, value int32) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	cregAddr, _ := (C.int)(regAddr), cgoAllocsUnknown
	cvalue, _ := (C.int)(value), cgoAllocsUnknown
	__ret := C.modbus_write_register(cctx, cregAddr, cvalue)
	__v := (int32)(__ret)
	return __v
}

// WriteBits function as declared in libmodbus/modbus.h:208
func WriteBits(ctx []T, addr int32, nb int32, data string) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	caddr, _ := (C.int)(addr), cgoAllocsUnknown
	cnb, _ := (C.int)(nb), cgoAllocsUnknown
	cdata, _ := unpackPUint8TString(data)
	__ret := C.modbus_write_bits(cctx, caddr, cnb, cdata)
	__v := (int32)(__ret)
	return __v
}

// WriteRegisters function as declared in libmodbus/modbus.h:209
func WriteRegisters(ctx []T, addr int32, nb int32, data []uint16) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	caddr, _ := (C.int)(addr), cgoAllocsUnknown
	cnb, _ := (C.int)(nb), cgoAllocsUnknown
	cdata, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&data)).Data)), cgoAllocsUnknown
	__ret := C.modbus_write_registers(cctx, caddr, cnb, cdata)
	__v := (int32)(__ret)
	return __v
}

// MaskWriteRegister function as declared in libmodbus/modbus.h:210
func MaskWriteRegister(ctx []T, addr int32, andMask uint16, orMask uint16) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	caddr, _ := (C.int)(addr), cgoAllocsUnknown
	candMask, _ := (C.uint16_t)(andMask), cgoAllocsUnknown
	corMask, _ := (C.uint16_t)(orMask), cgoAllocsUnknown
	__ret := C.modbus_mask_write_register(cctx, caddr, candMask, corMask)
	__v := (int32)(__ret)
	return __v
}

// WriteAndReadRegisters function as declared in libmodbus/modbus.h:211
func WriteAndReadRegisters(ctx []T, writeAddr int32, writeNb int32, src []uint16, readAddr int32, readNb int32, dest []uint16) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	cwriteAddr, _ := (C.int)(writeAddr), cgoAllocsUnknown
	cwriteNb, _ := (C.int)(writeNb), cgoAllocsUnknown
	csrc, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&src)).Data)), cgoAllocsUnknown
	creadAddr, _ := (C.int)(readAddr), cgoAllocsUnknown
	creadNb, _ := (C.int)(readNb), cgoAllocsUnknown
	cdest, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dest)).Data)), cgoAllocsUnknown
	__ret := C.modbus_write_and_read_registers(cctx, cwriteAddr, cwriteNb, csrc, creadAddr, creadNb, cdest)
	__v := (int32)(__ret)
	return __v
}

// ReportSlaveId function as declared in libmodbus/modbus.h:214
func ReportSlaveId(ctx []T, maxDest int32, dest []byte) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	cmaxDest, _ := (C.int)(maxDest), cgoAllocsUnknown
	cdest, _ := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dest)).Data)), cgoAllocsUnknown
	__ret := C.modbus_report_slave_id(cctx, cmaxDest, cdest)
	__v := (int32)(__ret)
	return __v
}

// MappingNewStartAddress function as declared in libmodbus/modbus.h:216
func MappingNewStartAddress(startBits uint32, nbBits uint32, startInputBits uint32, nbInputBits uint32, startRegisters uint32, nbRegisters uint32, startInputRegisters uint32, nbInputRegisters uint32) *MappingT {
	cstartBits, _ := (C.uint)(startBits), cgoAllocsUnknown
	cnbBits, _ := (C.uint)(nbBits), cgoAllocsUnknown
	cstartInputBits, _ := (C.uint)(startInputBits), cgoAllocsUnknown
	cnbInputBits, _ := (C.uint)(nbInputBits), cgoAllocsUnknown
	cstartRegisters, _ := (C.uint)(startRegisters), cgoAllocsUnknown
	cnbRegisters, _ := (C.uint)(nbRegisters), cgoAllocsUnknown
	cstartInputRegisters, _ := (C.uint)(startInputRegisters), cgoAllocsUnknown
	cnbInputRegisters, _ := (C.uint)(nbInputRegisters), cgoAllocsUnknown
	__ret := C.modbus_mapping_new_start_address(cstartBits, cnbBits, cstartInputBits, cnbInputBits, cstartRegisters, cnbRegisters, cstartInputRegisters, cnbInputRegisters)
	__v := NewMappingTRef(unsafe.Pointer(__ret))
	return __v
}

// MappingNew function as declared in libmodbus/modbus.h:222
func MappingNew(nbBits int32, nbInputBits int32, nbRegisters int32, nbInputRegisters int32) *MappingT {
	cnbBits, _ := (C.int)(nbBits), cgoAllocsUnknown
	cnbInputBits, _ := (C.int)(nbInputBits), cgoAllocsUnknown
	cnbRegisters, _ := (C.int)(nbRegisters), cgoAllocsUnknown
	cnbInputRegisters, _ := (C.int)(nbInputRegisters), cgoAllocsUnknown
	__ret := C.modbus_mapping_new(cnbBits, cnbInputBits, cnbRegisters, cnbInputRegisters)
	__v := NewMappingTRef(unsafe.Pointer(__ret))
	return __v
}

// MappingFree function as declared in libmodbus/modbus.h:224
func MappingFree(mbMapping []MappingT) {
	cmbMapping, _ := unpackArgSMappingT(mbMapping)
	C.modbus_mapping_free(cmbMapping)
	packSMappingT(mbMapping, cmbMapping)
}

// SendRawRequest function as declared in libmodbus/modbus.h:226
func SendRawRequest(ctx []T, rawReq []byte, rawReqLength int32) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	crawReq, _ := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rawReq)).Data)), cgoAllocsUnknown
	crawReqLength, _ := (C.int)(rawReqLength), cgoAllocsUnknown
	__ret := C.modbus_send_raw_request(cctx, crawReq, crawReqLength)
	__v := (int32)(__ret)
	return __v
}

// Receive function as declared in libmodbus/modbus.h:228
func Receive(ctx []T, req []byte) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	creq, _ := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&req)).Data)), cgoAllocsUnknown
	__ret := C.modbus_receive(cctx, creq)
	__v := (int32)(__ret)
	return __v
}

// ReceiveConfirmation function as declared in libmodbus/modbus.h:230
func ReceiveConfirmation(ctx []T, rsp []byte) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	crsp, _ := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rsp)).Data)), cgoAllocsUnknown
	__ret := C.modbus_receive_confirmation(cctx, crsp)
	__v := (int32)(__ret)
	return __v
}

// Reply function as declared in libmodbus/modbus.h:232
func Reply(ctx []T, req string, reqLength int32, mbMapping []MappingT) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	creq, _ := unpackPUint8TString(req)
	creqLength, _ := (C.int)(reqLength), cgoAllocsUnknown
	cmbMapping, _ := unpackArgSMappingT(mbMapping)
	__ret := C.modbus_reply(cctx, creq, creqLength, cmbMapping)
	packSMappingT(mbMapping, cmbMapping)
	__v := (int32)(__ret)
	return __v
}

// ReplyException function as declared in libmodbus/modbus.h:234
func ReplyException(ctx []T, req string, exceptionCode uint32) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	creq, _ := unpackPUint8TString(req)
	cexceptionCode, _ := (C.uint)(exceptionCode), cgoAllocsUnknown
	__ret := C.modbus_reply_exception(cctx, creq, cexceptionCode)
	__v := (int32)(__ret)
	return __v
}

// SetBitsFromByte function as declared in libmodbus/modbus.h:268
func SetBitsFromByte(dest []byte, idx int32, value byte) {
	cdest, _ := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dest)).Data)), cgoAllocsUnknown
	cidx, _ := (C.int)(idx), cgoAllocsUnknown
	cvalue, _ := (C.uint8_t)(value), cgoAllocsUnknown
	C.modbus_set_bits_from_byte(cdest, cidx, cvalue)
}

// SetBitsFromBytes function as declared in libmodbus/modbus.h:269
func SetBitsFromBytes(dest []byte, idx int32, nbBits uint32, tabByte string) {
	cdest, _ := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dest)).Data)), cgoAllocsUnknown
	cidx, _ := (C.int)(idx), cgoAllocsUnknown
	cnbBits, _ := (C.uint)(nbBits), cgoAllocsUnknown
	ctabByte, _ := unpackPUint8TString(tabByte)
	C.modbus_set_bits_from_bytes(cdest, cidx, cnbBits, ctabByte)
}

// GetByteFromBits function as declared in libmodbus/modbus.h:271
func GetByteFromBits(src string, idx int32, nbBits uint32) byte {
	csrc, _ := unpackPUint8TString(src)
	cidx, _ := (C.int)(idx), cgoAllocsUnknown
	cnbBits, _ := (C.uint)(nbBits), cgoAllocsUnknown
	__ret := C.modbus_get_byte_from_bits(csrc, cidx, cnbBits)
	__v := (byte)(__ret)
	return __v
}

// GetFloat function as declared in libmodbus/modbus.h:272
func GetFloat(src []uint16) float32 {
	csrc, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&src)).Data)), cgoAllocsUnknown
	__ret := C.modbus_get_float(csrc)
	__v := (float32)(__ret)
	return __v
}

// GetFloatAbcd function as declared in libmodbus/modbus.h:273
func GetFloatAbcd(src []uint16) float32 {
	csrc, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&src)).Data)), cgoAllocsUnknown
	__ret := C.modbus_get_float_abcd(csrc)
	__v := (float32)(__ret)
	return __v
}

// GetFloatDcba function as declared in libmodbus/modbus.h:274
func GetFloatDcba(src []uint16) float32 {
	csrc, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&src)).Data)), cgoAllocsUnknown
	__ret := C.modbus_get_float_dcba(csrc)
	__v := (float32)(__ret)
	return __v
}

// GetFloatBadc function as declared in libmodbus/modbus.h:275
func GetFloatBadc(src []uint16) float32 {
	csrc, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&src)).Data)), cgoAllocsUnknown
	__ret := C.modbus_get_float_badc(csrc)
	__v := (float32)(__ret)
	return __v
}

// GetFloatCdab function as declared in libmodbus/modbus.h:276
func GetFloatCdab(src []uint16) float32 {
	csrc, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&src)).Data)), cgoAllocsUnknown
	__ret := C.modbus_get_float_cdab(csrc)
	__v := (float32)(__ret)
	return __v
}

// SetFloat function as declared in libmodbus/modbus.h:278
func SetFloat(f float32, dest []uint16) {
	cf, _ := (C.float)(f), cgoAllocsUnknown
	cdest, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dest)).Data)), cgoAllocsUnknown
	C.modbus_set_float(cf, cdest)
}

// SetFloatAbcd function as declared in libmodbus/modbus.h:279
func SetFloatAbcd(f float32, dest []uint16) {
	cf, _ := (C.float)(f), cgoAllocsUnknown
	cdest, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dest)).Data)), cgoAllocsUnknown
	C.modbus_set_float_abcd(cf, cdest)
}

// SetFloatDcba function as declared in libmodbus/modbus.h:280
func SetFloatDcba(f float32, dest []uint16) {
	cf, _ := (C.float)(f), cgoAllocsUnknown
	cdest, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dest)).Data)), cgoAllocsUnknown
	C.modbus_set_float_dcba(cf, cdest)
}

// SetFloatBadc function as declared in libmodbus/modbus.h:281
func SetFloatBadc(f float32, dest []uint16) {
	cf, _ := (C.float)(f), cgoAllocsUnknown
	cdest, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dest)).Data)), cgoAllocsUnknown
	C.modbus_set_float_badc(cf, cdest)
}

// SetFloatCdab function as declared in libmodbus/modbus.h:282
func SetFloatCdab(f float32, dest []uint16) {
	cf, _ := (C.float)(f), cgoAllocsUnknown
	cdest, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dest)).Data)), cgoAllocsUnknown
	C.modbus_set_float_cdab(cf, cdest)
}

// NewTcp function as declared in libmodbus/modbus-tcp.h:42
func NewTcp(ipAddress string, port int32) *T {
	cipAddress, _ := unpackPCharString(ipAddress)
	cport, _ := (C.int)(port), cgoAllocsUnknown
	__ret := C.modbus_new_tcp(cipAddress, cport)
	__v := *(**T)(unsafe.Pointer(&__ret))
	return __v
}

// TcpListen function as declared in libmodbus/modbus-tcp.h:43
func TcpListen(ctx []T, nbConnection int32) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	cnbConnection, _ := (C.int)(nbConnection), cgoAllocsUnknown
	__ret := C.modbus_tcp_listen(cctx, cnbConnection)
	__v := (int32)(__ret)
	return __v
}

// TcpAccept function as declared in libmodbus/modbus-tcp.h:44
func TcpAccept(ctx []T, s []int32) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	cs, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&s)).Data)), cgoAllocsUnknown
	__ret := C.modbus_tcp_accept(cctx, cs)
	__v := (int32)(__ret)
	return __v
}

// NewTcpPi function as declared in libmodbus/modbus-tcp.h:46
func NewTcpPi(node string, service string) *T {
	cnode, _ := unpackPCharString(node)
	cservice, _ := unpackPCharString(service)
	__ret := C.modbus_new_tcp_pi(cnode, cservice)
	__v := *(**T)(unsafe.Pointer(&__ret))
	return __v
}

// TcpPiListen function as declared in libmodbus/modbus-tcp.h:47
func TcpPiListen(ctx []T, nbConnection int32) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	cnbConnection, _ := (C.int)(nbConnection), cgoAllocsUnknown
	__ret := C.modbus_tcp_pi_listen(cctx, cnbConnection)
	__v := (int32)(__ret)
	return __v
}

// TcpPiAccept function as declared in libmodbus/modbus-tcp.h:48
func TcpPiAccept(ctx []T, s []int32) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	cs, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&s)).Data)), cgoAllocsUnknown
	__ret := C.modbus_tcp_pi_accept(cctx, cs)
	__v := (int32)(__ret)
	return __v
}

// NewRtu function as declared in libmodbus/modbus-rtu.h:19
func NewRtu(device string, baud int32, parity byte, dataBit int32, stopBit int32) *T {
	cdevice, _ := unpackPCharString(device)
	cbaud, _ := (C.int)(baud), cgoAllocsUnknown
	cparity, _ := (C.char)(parity), cgoAllocsUnknown
	cdataBit, _ := (C.int)(dataBit), cgoAllocsUnknown
	cstopBit, _ := (C.int)(stopBit), cgoAllocsUnknown
	__ret := C.modbus_new_rtu(cdevice, cbaud, cparity, cdataBit, cstopBit)
	__v := *(**T)(unsafe.Pointer(&__ret))
	return __v
}

// RtuSetSerialMode function as declared in libmodbus/modbus-rtu.h:25
func RtuSetSerialMode(ctx []T, mode int32) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	cmode, _ := (C.int)(mode), cgoAllocsUnknown
	__ret := C.modbus_rtu_set_serial_mode(cctx, cmode)
	__v := (int32)(__ret)
	return __v
}

// RtuGetSerialMode function as declared in libmodbus/modbus-rtu.h:26
func RtuGetSerialMode(ctx []T) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	__ret := C.modbus_rtu_get_serial_mode(cctx)
	__v := (int32)(__ret)
	return __v
}

// RtuSetRts function as declared in libmodbus/modbus-rtu.h:32
func RtuSetRts(ctx []T, mode int32) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	cmode, _ := (C.int)(mode), cgoAllocsUnknown
	__ret := C.modbus_rtu_set_rts(cctx, cmode)
	__v := (int32)(__ret)
	return __v
}

// RtuGetRts function as declared in libmodbus/modbus-rtu.h:33
func RtuGetRts(ctx []T) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	__ret := C.modbus_rtu_get_rts(cctx)
	__v := (int32)(__ret)
	return __v
}

// RtuSetRtsDelay function as declared in libmodbus/modbus-rtu.h:37
func RtuSetRtsDelay(ctx []T, us int32) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	cus, _ := (C.int)(us), cgoAllocsUnknown
	__ret := C.modbus_rtu_set_rts_delay(cctx, cus)
	__v := (int32)(__ret)
	return __v
}

// RtuGetRtsDelay function as declared in libmodbus/modbus-rtu.h:38
func RtuGetRtsDelay(ctx []T) int32 {
	cctx, _ := (*C.modbus_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctx)).Data)), cgoAllocsUnknown
	__ret := C.modbus_rtu_get_rts_delay(cctx)
	__v := (int32)(__ret)
	return __v
}
